{% extends 'base.html.twig' %}

{% block title %}Conversation{% endblock %}

{% block body %}
<h2>Conversation avec {{ otherUser.email }}</h2>

<div id="messages" style="max-height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
    {% for message in messages %}
        <div id="msg-{{ message.id }}" class="message {% if message.sender.id == currentUser.id %}sent{% else %}received{% endif %}">
            <div class="message-content">
                {{ message.content|e }}
                <div class="message-info small text-muted">
                    {{ message.createdAt|date('H:i') }}
                    {% if message.sender.id == currentUser.id %}
                        {{ message.isRead ? ' ✓✓' : ' ✓' }}
                    {% endif %}
                </div>
            </div>
        </div>
    {% else %}
        <p>Aucun message pour le moment.</p>
    {% endfor %}
</div>

<form id="send-message-form">
    <input type="hidden" name="receiver_id" value="{{ otherUser.id }}">
    <textarea id="message-input" name="content" required placeholder="Tapez votre message..." rows="3" style="width: 100%;"></textarea>
    <button type="submit">Envoyer</button>
</form>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const messagesContainer = document.getElementById('messages');
    const messageInput = document.getElementById('message-input');
    const sendForm = document.getElementById('send-message-form');
    const currentUserId = Number({{ currentUser.id|json_encode|raw }});
    const otherUserId = Number({{ otherUser.id|json_encode|raw }});
    let lastMessageId = 0;

    function addMessage(message) {
        if (document.getElementById('msg-' + message.id)) {
            return; // message déjà affiché
        }

        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${Number(message.sender) === currentUserId ? 'sent' : 'received'}`;
        messageDiv.id = 'msg-' + message.id;
        messageDiv.innerHTML = `
            <div class="message-content">
                ${escapeHtml(message.content)}
                <div class="message-info small text-muted">
                    ${new Date(message.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                    ${Number(message.sender) === currentUserId ? (message.isRead ? ' ✓✓' : ' ✓') : ''}
                </div>
            </div>
        `;
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;

        if (message.id > lastMessageId) {
            lastMessageId = message.id;
        }
    }

    // Fonction d'échappement simple pour éviter l'injection HTML
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    function fetchMessages() {
        fetch('{{ path('chat_get_messages', {'id': otherUser.id}) }}')
            .then(response => response.json())
            .then(data => {
                data.forEach(msg => addMessage(msg));
            })
            .catch(err => {
                console.error('Erreur lors de la récupération des messages', err);
            });
    }

    sendForm.addEventListener('submit', function(e) {
        e.preventDefault();

        const submitButton = sendForm.querySelector('button[type="submit"]');
        submitButton.disabled = true;

        const formData = new FormData(sendForm);

        fetch('{{ path('chat_send') }}', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                alert(data.error);
            } else {
                addMessage(data);
                messageInput.value = '';
            }
            submitButton.disabled = false;
        })
        .catch(() => {
            alert('Erreur lors de l\'envoi du message.');
            submitButton.disabled = false;
        });
    });

    // Chargement initial
    fetchMessages();

    // Actualisation toutes les 5 secondes
    setInterval(fetchMessages, 5000);
});
</script>
{% endblock %}