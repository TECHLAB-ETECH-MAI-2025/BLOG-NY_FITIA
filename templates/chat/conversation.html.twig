{% extends 'base.html.twig' %}

{% block title %}Conversation avec {{ otherUser.email }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('build/conversation.css') }}">
{% endblock %}

{% block body %}
<h2>Conversation avec {{ otherUser.email }}</h2>

<div id="messages" style="max-height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
    {% for message in messages %}
        <div id="msg-{{ message.id }}" class="message {% if message.sender.id == currentUser.id %}sent{% else %}received{% endif %}">
            <div class="message-content">
                {{ message.content|e }}
                <div class="message-info small text-muted">
                    {{ message.createdAt|date('H:i') }}
                    {% if message.sender.id == currentUser.id %}
                        {{ message.isRead ? ' ✓✓' : ' ✓' }}
                    {% endif %}
                </div>
            </div>
        </div>
    {% else %}
        <p>Aucun message pour le moment.</p>
    {% endfor %}
</div>

<form id="send-message-form">
    <input type="hidden" name="receiver_id" value="{{ otherUser.id }}">
    <textarea id="message-input" name="content" required placeholder="Tapez votre message..." rows="3" style="width: 100%;"></textarea>
    <button type="submit">Envoyer</button>
</form>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
     <script>
        document.addEventListener('DOMContentLoaded', function() {
            const messagesContainer = document.getElementById('messages');
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');
            const currentUser = {{ app.user.id|json_encode|raw }};
            const otherUser = {{ otherUser.id|json_encode|raw }};
            
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            const mercureUrl = new URL('{{ mercure_publish_url }}');
            mercureUrl.searchParams.append('topic', `/user/${currentUser}/messages`);
            mercureUrl.searchParams.append('topic', `/user/${otherUser}/messages`);
            
            const eventSource = new EventSource(mercureUrl);
            
            eventSource.onmessage = event => {
                const data = JSON.parse(event.data);
                
                if (data.sender === otherUser || data.sender === currentUser) {
                    const messageDiv = document.createElement('div');
                    messageDiv.className = `message ${data.sender === currentUser ? 'sent' : 'received'}`;
                    messageDiv.innerHTML = `
                        <div class="message-content">
                            ${data.content}
                            <div class="message-info">
                                ${new Date(data.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                                ${data.sender === currentUser ? (data.isRead ? '✓✓' : '✓') : ''}
                            </div>
                        </div>
                    `;
                    
                    messagesContainer.appendChild(messageDiv);
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                }
            };
            
            sendButton.addEventListener('click', sendMessage);
            messageInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
    }

    sendForm.addEventListener('submit', function(e) {
        e.preventDefault();

        const submitButton = sendForm.querySelector('button[type="submit"]');
        submitButton.disabled = true;

        const formData = new FormData(sendForm);

        fetch('{{ path('chat_send') }}', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                alert(data.error);
            } else {
                addMessage(data);
                messageInput.value = '';
            }
            submitButton.disabled = false;
        })
        .catch(() => {
            alert('Erreur lors de l\'envoi du message.');
            submitButton.disabled = false;
        });
    });

    // Chargement initial
    fetchMessages();

    // Actualisation toutes les 5 secondes
    setInterval(fetchMessages, 5000);
});
</script>
{% endblock %}