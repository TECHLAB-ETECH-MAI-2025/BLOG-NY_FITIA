<?php

<<<<<<< HEAD:backend/var/cache/dev/ContainerXizlpCa/getTurbo_Doctrine_EventListenerService.php
<<<<<<<< HEAD:backend/var/cache/dev/ContainerO47bD08/getTurbo_Doctrine_EventListenerService.php
namespace ContainerO47bD08;
========
namespace ContainerXizlpCa;
>>>>>>>> 7c704d2aa (Final Pagination react cote Backend):backend/var/cache/dev/ContainerXizlpCa/getTurbo_Doctrine_EventListenerService.php
=======
namespace ContainerTSb7RzG;
>>>>>>> 11fdd162a (Debut Notification):backend/var/cache/dev/ContainerTSb7RzG/getTurbo_Doctrine_EventListenerService.php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getTurbo_Doctrine_EventListenerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'turbo.doctrine.event_listener' shared service.
     *
     * @return \Symfony\UX\Turbo\Doctrine\BroadcastListener
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ux-turbo/src/Doctrine/BroadcastListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ux-turbo/src/Broadcaster/BroadcasterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ux-turbo/src/Broadcaster/TwigBroadcaster.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ux-turbo/src/Broadcaster/ImuxBroadcaster.php';

        $a = ($container->privates['twig'] ?? self::getTwigService($container));

        if (isset($container->privates['turbo.doctrine.event_listener'])) {
            return $container->privates['turbo.doctrine.event_listener'];
        }

        return $container->privates['turbo.doctrine.event_listener'] = new \Symfony\UX\Turbo\Doctrine\BroadcastListener(new \Symfony\UX\Turbo\Broadcaster\TwigBroadcaster(new \Symfony\UX\Turbo\Broadcaster\ImuxBroadcaster(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['turbo.mercure.default.broadcaster'] ?? $container->load('getTurbo_Mercure_Default_BroadcasterService'));
        }, 1)), $a, ['App\\Entity\\' => 'broadcast/'], ($container->privates['turbo.id_accessor'] ?? $container->load('getTurbo_IdAccessorService'))), NULL);
    }
}
