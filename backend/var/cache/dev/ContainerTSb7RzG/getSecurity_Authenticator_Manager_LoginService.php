<?php

<<<<<<< HEAD:backend/var/cache/dev/ContainerXizlpCa/getSecurity_Authenticator_Manager_LoginService.php
<<<<<<<< HEAD:backend/var/cache/dev/ContainerOjV1UrF/getSecurity_Authenticator_Manager_LoginService.php
namespace ContainerOjV1UrF;
========
namespace ContainerXizlpCa;
>>>>>>>> 7c704d2aa (Final Pagination react cote Backend):backend/var/cache/dev/ContainerXizlpCa/getSecurity_Authenticator_Manager_LoginService.php
=======
namespace ContainerTSb7RzG;
>>>>>>> 11fdd162a (Debut Notification):backend/var/cache/dev/ContainerTSb7RzG/getSecurity_Authenticator_Manager_LoginService.php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authenticator_Manager_LoginService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'security.authenticator.manager.login' shared service.
     *
     * @return \Symfony\Component\Security\Http\Authentication\AuthenticatorManager
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authentication/AuthenticatorManagerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authentication/UserAuthenticatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authentication/AuthenticatorManager.php';

        $a = ($container->privates['debug.security.authenticator.json_login.login'] ?? $container->load('getDebug_Security_Authenticator_JsonLogin_LoginService'));

        if (isset($container->privates['security.authenticator.manager.login'])) {
            return $container->privates['security.authenticator.manager.login'];
        }

        return $container->privates['security.authenticator.manager.login'] = new \Symfony\Component\Security\Http\Authentication\AuthenticatorManager([$a], ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), ($container->privates['debug.security.event_dispatcher.login'] ?? $container->load('getDebug_Security_EventDispatcher_LoginService')), 'login', ($container->privates['monolog.logger.security'] ?? $container->load('getMonolog_Logger_SecurityService')), true, true, []);
    }
}
