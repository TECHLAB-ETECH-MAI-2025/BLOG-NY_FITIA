{# templates/chat/conversation.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Conversation avec {{ otherUser.email }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('build/conversation.css') }}">
    <style>
      /* Quelques styles en ligne pour la dÃ©mo, Ã  extraire ensuite dans conversation.css si tu prÃ©fÃ¨res */
      #messages {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #ccc;
        border-radius: 0.5rem;
        padding: 1rem;
        background: #f8f9fa;
      }
      .message {
        margin-bottom: 0.75rem;
        max-width: 75%;
        word-wrap: break-word;
      }
      .message.sent {
        margin-left: auto;
        background: #d1e7dd;
        padding: 0.5rem 0.75rem;
        border-radius: 0.75rem 0.75rem 0 0.75rem;
      }
      .message.received {
        margin-right: auto;
        background: #ffffff;
        padding: 0.5rem 0.75rem;
        border-radius: 0.75rem 0.75rem 0.75rem 0;
      }
      .message-info {
        font-size: 0.75rem;
        color: #6c757d;
        margin-top: 0.25rem;
        text-align: right;
      }
      /* Header */
      .chat-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
      }
      .chat-header .avatar-image,
      .chat-header .avatar-initials {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        object-fit: cover;
      }
      .chat-header .avatar-initials {
        font-size: 1.25rem;
      }
      .chat-header .user-info h4 {
        margin-bottom: 0;
        font-weight: 600;
      }
      .chat-header .user-status {
        font-size: 0.875rem;
      }
      /* Formulaire */
      #send-message-form .form-group {
        display: flex;
      }
      #send-message-form textarea {
        flex-grow: 1;
        resize: none;
      }
      #send-message-form button {
        width: 48px;
        margin-left: 0.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
      }
    </style>
{% endblock %}

{% block body %}
    <div class="chat-container container py-3" style="max-width: 600px;">

        {# --- Header (avatar + nom + statut) --- #}
        <div class="chat-header">
            <div class="d-flex align-items-center">
                <div class="avatar-container me-3">
                    {% if otherUser.avatar %}
                        <img src="{{ asset('uploads/avatars/' ~ otherUser.avatar) }}"
                             alt="{{ otherUser.firstName }} {{ otherUser.lastName }}"
                             class="avatar-image">
                    {% else %}
                        <div class="avatar-initials d-flex align-items-center justify-content-center bg-primary text-white fw-bold">
                            {{ otherUser.firstName|first|upper }}{{ otherUser.lastName|first|upper }}
                        </div>
                    {% endif %}
                </div>
                <div class="user-info">
                    <h4>{{ otherUser.firstName }} {{ otherUser.lastName }}</h4>
                    <div class="user-status text-muted">
                        {% if otherUser.isActiveNow() %}
                            <span class="text-success">ðŸŸ¢ En ligne</span>
                        {% else %}
                            <span class="text-muted">ðŸ”´ Hors ligne</span>
                            {% if otherUser.lastActivityAt %}
                                <small class="ms-1 text-muted">DerniÃ¨re activitÃ©Â : {{ otherUser.lastActivityAt|date('H:i') }}</small>
                            {% endif %}
                        {% endif %}
                    </div>
                </div>
            </div>
            <a href="{{ path('app_chat') }}" class="btn-close" aria-label="Fermer la conversation"></a>
        </div>

        {# --- Zone des messages --- #}
        <div id="messages">
            {% for message in messages %}
                <div id="msg-{{ message.id }}"
                     class="message {% if message.sender.id == currentUser.id %}sent{% else %}received{% endif %}">
                    <div>{{ message.content|e }}</div>
                    <div class="message-info">
                        {{ message.createdAt|date('H:i') }}
                        {% if message.sender.id == currentUser.id %}
                            {{ message.isRead ? 'âœ“âœ“' : 'âœ“' }}
                        {% endif %}
                    </div>
                </div>
            {% else %}
                <p class="text-center fst-italic text-muted">Aucun message pour le moment.</p>
            {% endfor %}
        </div>

        {# --- Formulaire d'envoi --- #}
        <form id="send-message-form" class="mt-3">
            <input type="hidden" name="receiver_id" value="{{ otherUser.id }}">
            <div class="form-group mb-2">
                <textarea id="message-input"
                          name="content"
                          required
                          placeholder="Tapez votre message..."
                          rows="1"
                          class="form-control shadow-sm"></textarea>
                <button id="send-button" type="submit" class="btn btn-primary shadow-sm">
                    <i class="bi bi-send"></i>
                </button>
            </div>
        </form>

    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const messagesContainer = document.getElementById('messages');
        const messageInput      = document.getElementById('message-input');
        const sendButton        = document.getElementById('send-button');
        const sendForm          = document.getElementById('send-message-form');
        const currentUserId     = Number({{ currentUser.id|json_encode|raw }});
        const otherUserId       = Number({{ otherUser.id|json_encode|raw }});

        /**
         * Ajoute un nouveau message dans le DOM (Ã©vite les doublons grÃ¢ce Ã  l'ID)
         */
        function addMessage(message) {
            if (document.getElementById('msg-' + message.id)) {
                return; // dÃ©jÃ  prÃ©sent
            }

            const div = document.createElement('div');
            div.id = 'msg-' + message.id;
            div.className = 'message ' + (Number(message.sender) === currentUserId ? 'sent' : 'received');
            div.innerHTML = `
                <div>${message.content}</div>
                <div class="message-info">
                    ${new Date(message.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                    ${Number(message.sender) === currentUserId ? (message.isRead ? 'âœ“âœ“' : 'âœ“') : ''}
                </div>
            `;
            messagesContainer.appendChild(div);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        /**
         * RÃ©cupÃ¨re les messages via AJAX (polling)
         */
        function fetchMessages() {
            fetch('{{ path('chat_get_messages', {'id': otherUser.id}) }}')
                .then(response => response.json())
                .then(data => {
                    data.forEach(msg => addMessage(msg));
                })
                .catch(err => {
                    console.error('Erreur lors de la rÃ©cupÃ©ration des messages :', err);
                });
        }

        /**
         * Soumet le message via AJAX
         */
        sendForm.addEventListener('submit', function(e) {
            e.preventDefault();

            sendButton.disabled = true;
            const formData = new FormData(sendForm);

            fetch('{{ path('chat_send') }}', {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert(data.error);
                } else {
                    addMessage(data);
                    messageInput.value = '';
                    messageInput.focus();
                }
                sendButton.disabled = false;
            })
            .catch(err => {
                alert('Erreur lors de lâ€™envoi du message.');
                console.error(err);
                sendButton.disabled = false;
            });
        });

        // Chargement initial des messages + scroll en bas
        fetchMessages();
        messagesContainer.scrollTop = messagesContainer.scrollHeight;

        // Polling : rÃ©cupÃ©ration toutes les 5 secondes
        setInterval(fetchMessages, 5000);
    });
    </script>
{% endblock %}